name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  LOGIN_AWS_REGION: ${{ secrets.LOGIN_AWS_REGION }}
  ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
  IMAGE_LATEST_TAG: "latest"
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.LOGIN_AWS_REGION }}.amazonaws.com

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-push-image:
    name: Build, test and push image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:

      - uses: actions/checkout@v3

      - name: Get JDK version
        run: |
          JAVA_VERSION=$(cat Dockerfile | grep "ARG JAVA_VERSION=" | grep -o "[^=]*$")
          [[ -z "${JAVA_VERSION}" ]] && echo "Error: JAVA_VERSION not found in Dockerfile" && exit 123
          echo "JAVA_VERSION=${JAVA_VERSION}" >> "${GITHUB_ENV}"

      - name: Get sbt version
        run: |
          SBT_VERSION=$(cat project/build.properties | grep "sbt.version=" | grep -o "[^=]*$")
          [[ -z "${SBT_VERSION}" ]] && echo "Error: SBT_VERSION not found in Dockerfile" && exit 123
          echo "SBT_VERSION=${SBT_VERSION}" >> "${GITHUB_ENV}"

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "adopt"

      - name: Scalafmt check
        run: sbt scalafmtSbtCheck scalafmtCheck Test/scalafmtCheck

      - name: Run tests
        run: sbt test

      - name: Build image
        run: |
          docker build --tag "${ECR_REPO_NAME}:${IMAGE_LATEST_TAG}" \
            --build-arg "JAVA_VERSION=${JAVA_VERSION}" \
            --build-arg "SBT_VERSION=${SBT_VERSION}" \
            --file ./Dockerfile .
          IMAGE_ID=$(
            docker images --format '{{json .}}' "${ECR_REPO_NAME}:${IMAGE_LATEST_TAG}" | \
              jq --raw-output '.ID'
          )
          docker tag "${IMAGE_ID}" "${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_LATEST_TAG}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.PROD_CI_ROLE_ARN }}
          aws-region: ${{ env.LOGIN_AWS_REGION }}

      - name: Push image
        run: |
          aws ecr get-login-password --region "${LOGIN_AWS_REGION}" | \
            docker login --username "AWS" --password-stdin "${ECR_REGISTRY}"
          docker push "${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_LATEST_TAG}"
